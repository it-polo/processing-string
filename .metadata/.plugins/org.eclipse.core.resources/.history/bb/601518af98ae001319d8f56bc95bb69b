import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.Visibility;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.text.DefaultCaret;


class AddFrame extends OperationWithString
{
	private static String ENTER = "Enter";
    static JButton enterButton;
    public static JTextArea output;
    public static JTextField input;
    public static JComboBox editComboBox;
    static JFrame frame;
    static JPanel panel;
    public static String[] items = {
    	    "English",
    	    "Русский"
    	};

	public static void createFrame()
    {
        frame = new JFrame("OperationWithString");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(700, 400);
        panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setOpaque(true);
        ButtonListener buttonListener = new ButtonListener();
        output = new JTextArea(30, 100);
        output.setWrapStyleWord(true);
        output.setEditable(false);
        JScrollPane scroller = new JScrollPane(output);
        scroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        JPanel inputpanel = new JPanel();
        inputpanel.setLayout(new FlowLayout());
        input = new JTextField(20);
        enterButton = new JButton("Enter");
        enterButton.setActionCommand(ENTER);
        enterButton.addActionListener(buttonListener);
        // enterButton.setEnabled(false);
        input.setActionCommand(ENTER);
        input.addActionListener(buttonListener);
        DefaultCaret caret = (DefaultCaret) output.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        panel.add(scroller);
        inputpanel.add(input);
        inputpanel.add(enterButton);
        panel.add(inputpanel);
        frame.getContentPane().add(BorderLayout.CENTER, panel);
        frame.pack();
        frame.setLocationByPlatform(true);
        // Center of screen
        // frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setResizable(false);
        input.requestFocus();
        output.setFont(new Font( "Dialog", Font.ITALIC, 15 ));
        output.setLineWrap(true);
        output.setWrapStyleWord(true);
        JComboBox editComboBox = new JComboBox(items);
        editComboBox.setVisible(true);
        inputpanel.add(editComboBox);
    }
}


class ButtonListener extends AddFrame implements ActionListener
{
    public void actionPerformed(final ActionEvent ev)
    {
    	
    	String str1 = (String)editComboBox.getSelectedItem();
    	if (str1 == 0) {
    		output.append("Длина строки с учетом пробелов равна: ");
    	}
    	
    	/*String str = input.getText();
    	char[] temp = str.toCharArray();
        int countVow = 0;
        char[] strVow = {'а','А','е','Е','ё','Ё','и','И','о','О','у','У','ы','Ы','э','Э','ю','Ю','я','Я'};
        
        for(int i = 0; i < str.length(); i++) {
            for(int j = 0; j < strVow.length; j++) {
	            if(temp[i] == strVow[j]){
	            	countVow++;
	            }
            }
        }
        int countCon = 0;
        char[] strCon = {'б','Б','в','В','г','Г','д','Д','ж','Ж','з','З','й','Й','к','К','л','Л','м','М','н','Н','п','П','р','Р','с','С','т','Т','ф','Ф','х','Х','ц','Ц','ч','Ч','ш','Ш','щ','Щ'};
        
        for(int i = 0; i < str.length(); i++) {
            for(int j = 0; j < strCon.length; j++) {
	            if(temp[i] == strCon[j]){
	            	countCon++;
	            }
            }
        }
        output.append("Длина строки с учетом пробелов равна: " + str.length() + "\n" + "Количество гласных букв в строке равно:  " 
        + countVow + "\n" + "Количество согласных букв в строке равно: " + countCon);*/
    }
}



public class OperationWithString {
    public static void main(String... args)
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        AddFrame add = new AddFrame();
        add.createFrame();

    }
}
